/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package overworker.gui;

import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import overworker.data.TimelogProvider;
import overworker.data.Timelog;
import overworker.data.TimelogCollection;
import overworker.net.TimelogServer;


/**
 *
 * @author schueler
 */
public class TimelogServerFrame extends javax.swing.JFrame implements TimelogProvider
{
  private TimelogServer server = null;
  private TimelogCollection collection = new TimelogCollection();
  /**
   * Creates new form SteckuhrServerFrame
   */
  public TimelogServerFrame()
  {
    initComponents();
    table.setModel(new TimelogTableModel(collection));
  }


  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Timelog Server");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        tp.setBorder(javax.swing.BorderFactory.createTitledBorder("Timelogs"));
        tp.setLayout(new java.awt.BorderLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        tp.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(tp, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridLayout(3, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Add Timelog"));

        jButton1.setText("Simulate");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onErfassen(evt);
            }
        });
        jPanel5.add(jButton1);

        jPanel4.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Server location"));

        jLabel1.setText("Name");
        jPanel6.add(jLabel1);

        tfName.setColumns(9);
        jPanel6.add(tfName);

        jPanel4.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Server control"));

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onServerStart(evt);
            }
        });
        jPanel3.add(jButton2);

        jButton3.setText("Stop");
        jButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onServerStop(evt);
            }
        });
        jPanel3.add(jButton3);

        jPanel7.add(jPanel3);

        jPanel4.add(jPanel7);

        jPanel2.add(jPanel4, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void onServerStart(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onServerStart
  {//GEN-HEADEREND:event_onServerStart
    try
    {
      if(server!=null)
        throw new Exception("Server is already running");
      server = new TimelogServer(this);
      server.start();
      showInfo("Server started");
    }
    catch (Exception e)
    {
      showError(e.getMessage());
    }
  }//GEN-LAST:event_onServerStart

  private void onServerStop(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onServerStop
  {//GEN-HEADEREND:event_onServerStop
    try
    {
      if(server==null)
        throw new Exception("Server is already stopped");
      server.stop();
      showInfo("Server stopped");
      server = null;
    }
    catch (Exception e)
    {
       showError(e.getMessage());
    }
  }//GEN-LAST:event_onServerStop

  private void onErfassen(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onErfassen
  {//GEN-HEADEREND:event_onErfassen
    new FetchDataWorker().execute();
  }//GEN-LAST:event_onErfassen

  private void showInfo(String message)
  {
    JOptionPane.showMessageDialog(this, message, "Message", JOptionPane.INFORMATION_MESSAGE);
  }
  
   private void showError(String error)
  {
    JOptionPane.showMessageDialog(this, error, "Error", JOptionPane.ERROR_MESSAGE);
  }
   
   @Override
  public TimelogCollection getTimelog()
  {
    return collection;
  }
  
  private int getRandom(int ug, int og)
  {
    return (int)((Math.random()* (og-ug))+ug);
  }
  
  private Timelog simuliereErfassung()
  {
    return new Timelog(getRandom(5, 15), "12:"+getRandom(25, 35),(getRandom(0, 100)>50));
  }

   @Override
   public String getServerLocation()
   {
       return tfName.getText();
   }
  
  private class FetchDataWorker extends SwingWorker<Timelog, Object>
  {


    @Override
    protected Timelog doInBackground() throws Exception
    {
      return simuliereErfassung();
    }


    @Override
    protected void done()
    {
      try
      {
        Timelog neu = get();
        collection.add(neu);
        table.setModel(new TimelogTableModel(collection));
      }
      catch (InterruptedException ignored){}
      catch (Exception ex)
      {
        showError(ex.getMessage());
      }
      
    }
    
    
    
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /*
     * Set the Nimbus look and feel
     */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(TimelogServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(TimelogServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(TimelogServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(TimelogServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /*
     * Create and display the form
     */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new TimelogServerFrame().setVisible(true);
      }
    });
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField tfName;
    private javax.swing.JPanel tp;
    // End of variables declaration//GEN-END:variables


  
}
